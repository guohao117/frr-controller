/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/guohao117/frr-controller/pkg/apis/frrcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FrrLister helps list Frrs.
// All objects returned here must be treated as read-only.
type FrrLister interface {
	// List lists all Frrs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Frr, err error)
	// Frrs returns an object that can list and get Frrs.
	Frrs(namespace string) FrrNamespaceLister
	FrrListerExpansion
}

// frrLister implements the FrrLister interface.
type frrLister struct {
	indexer cache.Indexer
}

// NewFrrLister returns a new FrrLister.
func NewFrrLister(indexer cache.Indexer) FrrLister {
	return &frrLister{indexer: indexer}
}

// List lists all Frrs in the indexer.
func (s *frrLister) List(selector labels.Selector) (ret []*v1alpha1.Frr, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Frr))
	})
	return ret, err
}

// Frrs returns an object that can list and get Frrs.
func (s *frrLister) Frrs(namespace string) FrrNamespaceLister {
	return frrNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FrrNamespaceLister helps list and get Frrs.
// All objects returned here must be treated as read-only.
type FrrNamespaceLister interface {
	// List lists all Frrs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Frr, err error)
	// Get retrieves the Frr from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Frr, error)
	FrrNamespaceListerExpansion
}

// frrNamespaceLister implements the FrrNamespaceLister
// interface.
type frrNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Frrs in the indexer for a given namespace.
func (s frrNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Frr, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Frr))
	})
	return ret, err
}

// Get retrieves the Frr from the indexer for a given namespace and name.
func (s frrNamespaceLister) Get(name string) (*v1alpha1.Frr, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("frr"), name)
	}
	return obj.(*v1alpha1.Frr), nil
}
